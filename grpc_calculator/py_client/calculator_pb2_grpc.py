# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import calculator_pb2 as calculator__pb2


class CalculationStub(object):
    """Calculation service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Addition = channel.unary_unary(
                '/calculator_protoc.Calculation/Addition',
                request_serializer=calculator__pb2.NumRequest.SerializeToString,
                response_deserializer=calculator__pb2.NumReply.FromString,
                )
        self.Substraction = channel.unary_unary(
                '/calculator_protoc.Calculation/Substraction',
                request_serializer=calculator__pb2.NumRequest.SerializeToString,
                response_deserializer=calculator__pb2.NumReply.FromString,
                )
        self.Multiplication = channel.unary_unary(
                '/calculator_protoc.Calculation/Multiplication',
                request_serializer=calculator__pb2.NumRequest.SerializeToString,
                response_deserializer=calculator__pb2.NumReply.FromString,
                )
        self.Division = channel.unary_unary(
                '/calculator_protoc.Calculation/Division',
                request_serializer=calculator__pb2.NumRequest.SerializeToString,
                response_deserializer=calculator__pb2.NumReply.FromString,
                )


class CalculationServicer(object):
    """Calculation service definition
    """

    def Addition(self, request, context):
        """Do Addition (num_a + num_b)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Substraction(self, request, context):
        """Do Substraction (num_a - num_b)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Multiplication(self, request, context):
        """Do Multiplication (num_a * num_b)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Division(self, request, context):
        """Do Division (num_a / num_b)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CalculationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Addition': grpc.unary_unary_rpc_method_handler(
                    servicer.Addition,
                    request_deserializer=calculator__pb2.NumRequest.FromString,
                    response_serializer=calculator__pb2.NumReply.SerializeToString,
            ),
            'Substraction': grpc.unary_unary_rpc_method_handler(
                    servicer.Substraction,
                    request_deserializer=calculator__pb2.NumRequest.FromString,
                    response_serializer=calculator__pb2.NumReply.SerializeToString,
            ),
            'Multiplication': grpc.unary_unary_rpc_method_handler(
                    servicer.Multiplication,
                    request_deserializer=calculator__pb2.NumRequest.FromString,
                    response_serializer=calculator__pb2.NumReply.SerializeToString,
            ),
            'Division': grpc.unary_unary_rpc_method_handler(
                    servicer.Division,
                    request_deserializer=calculator__pb2.NumRequest.FromString,
                    response_serializer=calculator__pb2.NumReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calculator_protoc.Calculation', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Calculation(object):
    """Calculation service definition
    """

    @staticmethod
    def Addition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calculator_protoc.Calculation/Addition',
            calculator__pb2.NumRequest.SerializeToString,
            calculator__pb2.NumReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Substraction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calculator_protoc.Calculation/Substraction',
            calculator__pb2.NumRequest.SerializeToString,
            calculator__pb2.NumReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Multiplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calculator_protoc.Calculation/Multiplication',
            calculator__pb2.NumRequest.SerializeToString,
            calculator__pb2.NumReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Division(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calculator_protoc.Calculation/Division',
            calculator__pb2.NumRequest.SerializeToString,
            calculator__pb2.NumReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
