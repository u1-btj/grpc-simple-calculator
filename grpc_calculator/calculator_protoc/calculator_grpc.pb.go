// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: calculator_protoc/calculator.proto

package calculator_protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculationClient is the client API for Calculation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculationClient interface {
	// Do Addition (num_a + num_b)
	Addition(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (*NumReply, error)
	// Do Substraction (num_a - num_b)
	Substraction(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (*NumReply, error)
	// Do Multiplication (num_a * num_b)
	Multiplication(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (*NumReply, error)
	// Do Division (num_a / num_b)
	Division(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (*NumReply, error)
}

type calculationClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculationClient(cc grpc.ClientConnInterface) CalculationClient {
	return &calculationClient{cc}
}

func (c *calculationClient) Addition(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (*NumReply, error) {
	out := new(NumReply)
	err := c.cc.Invoke(ctx, "/calculator_protoc.Calculation/Addition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationClient) Substraction(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (*NumReply, error) {
	out := new(NumReply)
	err := c.cc.Invoke(ctx, "/calculator_protoc.Calculation/Substraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationClient) Multiplication(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (*NumReply, error) {
	out := new(NumReply)
	err := c.cc.Invoke(ctx, "/calculator_protoc.Calculation/Multiplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationClient) Division(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (*NumReply, error) {
	out := new(NumReply)
	err := c.cc.Invoke(ctx, "/calculator_protoc.Calculation/Division", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculationServer is the server API for Calculation service.
// All implementations must embed UnimplementedCalculationServer
// for forward compatibility
type CalculationServer interface {
	// Do Addition (num_a + num_b)
	Addition(context.Context, *NumRequest) (*NumReply, error)
	// Do Substraction (num_a - num_b)
	Substraction(context.Context, *NumRequest) (*NumReply, error)
	// Do Multiplication (num_a * num_b)
	Multiplication(context.Context, *NumRequest) (*NumReply, error)
	// Do Division (num_a / num_b)
	Division(context.Context, *NumRequest) (*NumReply, error)
	mustEmbedUnimplementedCalculationServer()
}

// UnimplementedCalculationServer must be embedded to have forward compatible implementations.
type UnimplementedCalculationServer struct {
}

func (UnimplementedCalculationServer) Addition(context.Context, *NumRequest) (*NumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Addition not implemented")
}
func (UnimplementedCalculationServer) Substraction(context.Context, *NumRequest) (*NumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Substraction not implemented")
}
func (UnimplementedCalculationServer) Multiplication(context.Context, *NumRequest) (*NumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiplication not implemented")
}
func (UnimplementedCalculationServer) Division(context.Context, *NumRequest) (*NumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Division not implemented")
}
func (UnimplementedCalculationServer) mustEmbedUnimplementedCalculationServer() {}

// UnsafeCalculationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculationServer will
// result in compilation errors.
type UnsafeCalculationServer interface {
	mustEmbedUnimplementedCalculationServer()
}

func RegisterCalculationServer(s grpc.ServiceRegistrar, srv CalculationServer) {
	s.RegisterService(&Calculation_ServiceDesc, srv)
}

func _Calculation_Addition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServer).Addition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator_protoc.Calculation/Addition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServer).Addition(ctx, req.(*NumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculation_Substraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServer).Substraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator_protoc.Calculation/Substraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServer).Substraction(ctx, req.(*NumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculation_Multiplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServer).Multiplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator_protoc.Calculation/Multiplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServer).Multiplication(ctx, req.(*NumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculation_Division_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServer).Division(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator_protoc.Calculation/Division",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServer).Division(ctx, req.(*NumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Calculation_ServiceDesc is the grpc.ServiceDesc for Calculation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calculation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator_protoc.Calculation",
	HandlerType: (*CalculationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Addition",
			Handler:    _Calculation_Addition_Handler,
		},
		{
			MethodName: "Substraction",
			Handler:    _Calculation_Substraction_Handler,
		},
		{
			MethodName: "Multiplication",
			Handler:    _Calculation_Multiplication_Handler,
		},
		{
			MethodName: "Division",
			Handler:    _Calculation_Division_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator_protoc/calculator.proto",
}
