# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import topic_pb2 as topic__pb2


class TopicSelectionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamMeowFacts = channel.unary_stream(
                '/topic_selection.TopicSelection/StreamMeowFacts',
                request_serializer=topic__pb2.FactRequest.SerializeToString,
                response_deserializer=topic__pb2.FactResponse.FromString,
                )
        self.StreamAnimeQuotes = channel.unary_stream(
                '/topic_selection.TopicSelection/StreamAnimeQuotes',
                request_serializer=topic__pb2.QuoteRequest.SerializeToString,
                response_deserializer=topic__pb2.QuoteResponse.FromString,
                )


class TopicSelectionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamMeowFacts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamAnimeQuotes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TopicSelectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamMeowFacts': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamMeowFacts,
                    request_deserializer=topic__pb2.FactRequest.FromString,
                    response_serializer=topic__pb2.FactResponse.SerializeToString,
            ),
            'StreamAnimeQuotes': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamAnimeQuotes,
                    request_deserializer=topic__pb2.QuoteRequest.FromString,
                    response_serializer=topic__pb2.QuoteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'topic_selection.TopicSelection', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TopicSelection(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamMeowFacts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/topic_selection.TopicSelection/StreamMeowFacts',
            topic__pb2.FactRequest.SerializeToString,
            topic__pb2.FactResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamAnimeQuotes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/topic_selection.TopicSelection/StreamAnimeQuotes',
            topic__pb2.QuoteRequest.SerializeToString,
            topic__pb2.QuoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
